# set -g default-terminal "screen-256color"
set -g default-terminal "xterm-256color"
set-option -ga terminal-overrides ",xterm-256color:Tc"
# Common approach to fullstack development
# Create a tmux session for the project
#   Window 1 for frontend development
#   Window 2 for backend development
#   Window 3 for database development, etc.

# The directory that you are in when you create a new tmux session will be the default directory that
# new panes/windows are in when they are created. Keep this in mind when doing full stack development


# Common TMUX Commands for shell

# tmux new -s <Session-Name>
# tmux attach -t <Session-To-Attach-To>
# tmux detach — detaches from session you are currently on
# tmux kill-session -t <Session-Name> 
# tmux ls — shows a list of currently running tmux sessions

set -g prefix C-a
unbind C-b
bind-key C-a send-prefix

unbind %
bind | split-window -h 

unbind '"'
bind - split-window -v

# prefix => r will allow us to reload the tmux configuration
# prior to adding this to the tmux.conf file, you have to use :source-file ~/.tmux.conf one time
unbind r
bind r source-file ~/.tmux.conf

# h, j, k, l will be used to resize tmux panes
bind -r j resize-pane -D 5
bind -r k resize-pane -U 5
bind -r l resize-pane -R 5
bind -r h resize-pane -L 5

# m will maximize the selected pane in a tmux window
# doing the same command again i.e. prefix then m will return your pane split
bind -r m resize-pane -Z

# this will allow us to enable use of the mouse in tmux
set -g mouse on

# Prefix + 'c' — creates a new window in that tmux session — you can then navigate between windows in a tmux session using Prefix + '# of window'

# The windows are named according to your shell or nvim by default
# To rename a window (when on that window), press Prefix + ','
# Also switch between windows by doing Prefix + 'n' which will just go to the next window
# Prefix + 'p' will do the same thing but in previous direction


# Prefix + 'w' will show you the various windows in a tmux session
# Prefix + 's' will show you the various sessions running in tmux currently

# Enables 'vi' mode in tmux allowing us to use vim movements in tmux
# Prefix + '[' to start tmux copy mode -> enables you to use standard vim motion keys i.e. j to go down and k to go up
# Can also do shift+j and shift+k to keep the cursor in a controlled position
# Can also do control+u and control+d for your half-page jumps in this tmux copy vi mode
# Control + c can be used to exit copy mode (note the box in the top-right indicates you're in copy mode)
set-window-option -g mode-keys vi

# The following two commands allow us to highlight text with v to start and y to copy it (similar to vim)
bind-key -T copy-mode-vi 'v' send -X begin-selection # start selecting text with "v"
bind-key -T copy-mode-vi 'y' send -X copy-selection # copy text with "y"

# This setting makes dragging with your mouse to copy something is a bit more intuitive
unbind -T copy-mode-vi MouseDragEnd1Pane # don't exit copy mode when dragging with mouse

# remove delay for exiting insert mode with ESC in Neovim
set -sg escape-time 10

# tpm plugin
set -g @plugin 'tmux-plugins/tpm'

# list of tmux plugins
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'jimeh/tmux-themepack'
set -g @plugin 'tmux-plugins/tmux-resurrect' # persist tmux sessions after computer restart
set -g @plugin 'tmux-plugins/tmux-continuum' # automatically saves sessions for you every 15 minutes

set -g @themepack 'powerline/default/cyan'

set -g @resurrect-capture-pane-contents 'on' # tmux will capture what is within a pane when it persists the tmux session
set -g @continuum-restore 'on' # turn on continuum restore so that tmux-continuum plugin can work properly

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# Note when you add new plugins, you must run "Prefix => Shift + i (capital I)" to install the newly set plugins utilizing the 'tpm' package manager that we installed via git cloning the repository for tpm
run '~/.tmux/plugins/tpm/tpm'
